package homeview

import "github.com/tigorlazuardi/redmage/models"
import "github.com/tigorlazuardi/redmage/api/reddit"
import "fmt"
import "github.com/tigorlazuardi/redmage/views/utils"

type ImageCardOption uint

func (o ImageCardOption) Has(opt ImageCardOption) bool {
	return o&opt != 0
}

const (
	HideTitle ImageCardOption = 1 << iota
	HideDescription
	HideSubreddit
	HidePoster
)

templ RecentlyAddedImageCard(data *models.Image, opts ImageCardOption) {
	<div class="not-prose card card-bordered bg-base-100 shadow-xl w-[256px] min-w-[256px] rounded-xl">
		<figure>
			<a
				href={ templ.URL(fmt.Sprintf("/img/%s", data.ImageRelativePath)) }
			>
				<img
					class="object-contain w-[256px] h-[256px]"
					src={ fmt.Sprintf("/img/%s", data.ThumbnailRelativePath) }
					alt={ data.Title }
				/>
			</a>
		</figure>
		<div class="card-body">
			if !opts.Has(HideTitle) {
				<a
					href={ templ.URL(data.PostURL) }
					class="card-title font-bold underline text-base text-primary"
				>{ data.Title }</a>
			}
			<a class="text-primary underline" href={ templ.URL(data.PosterURL) }>{ data.Poster }</a>
			<div>
				@utils.RelativeTimeNode(fmt.Sprintf("relative-time-%s", data.PostName), data.CreatedAt)
			</div>
			<div class="card-actions justify-between">
				if data.R.Subreddit != nil {
					if !opts.Has(HideSubreddit) {
						<a
							class="badge badge-outline badge-primary"
							href={ templ.URL(fmt.Sprintf("https://reddit.com/%s/%s", reddit.SubredditType(data.R.Subreddit.Subtype), data.R.Subreddit.Name)) }
						>{ data.R.Subreddit.Name } </a>
					}
				}
			</div>
		</div>
	</div>
}

templ RecentlyAddedImageList(images models.ImageSlice, opts ImageCardOption) {
	<div class="w-[100vw] lg:w-[80vw] overflow-x-scroll flex gap-4 p-8 shadow-inner bg-base-300">
		for _, data := range images {
			@RecentlyAddedImageCard(data, opts)
		}
	</div>
}
